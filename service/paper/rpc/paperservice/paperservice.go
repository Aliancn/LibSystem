// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: paper.proto

package paperservice

import (
	"context"

	"LibSystem/service/paper/rpc/pb/paper_rpc_pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddPaperRequest         = paper_rpc_pb.AddPaperRequest
	AddPaperResponse        = paper_rpc_pb.AddPaperResponse
	DeletePaperRequest      = paper_rpc_pb.DeletePaperRequest
	DeletePaperResponse     = paper_rpc_pb.DeletePaperResponse
	DownloadPaperRequest    = paper_rpc_pb.DownloadPaperRequest
	DownloadPaperResponse   = paper_rpc_pb.DownloadPaperResponse
	GetAllPaperRequest      = paper_rpc_pb.GetAllPaperRequest
	GetAllPaperResponse     = paper_rpc_pb.GetAllPaperResponse
	GetPaperByIdRequest     = paper_rpc_pb.GetPaperByIdRequest
	GetPaperByIdResponse    = paper_rpc_pb.GetPaperByIdResponse
	GetPaperByTitleRequest  = paper_rpc_pb.GetPaperByTitleRequest
	GetPaperByTitleResponse = paper_rpc_pb.GetPaperByTitleResponse
	PaperList               = paper_rpc_pb.PaperList
	PaperVO                 = paper_rpc_pb.PaperVO
	UpdatePaperRequest      = paper_rpc_pb.UpdatePaperRequest
	UpdatePaperResponse     = paper_rpc_pb.UpdatePaperResponse

	PaperService interface {
		GetAllPaper(ctx context.Context, in *GetAllPaperRequest, opts ...grpc.CallOption) (*GetAllPaperResponse, error)
		GetPaperById(ctx context.Context, in *GetPaperByIdRequest, opts ...grpc.CallOption) (*GetPaperByIdResponse, error)
		GetPaperByTitle(ctx context.Context, in *GetPaperByTitleRequest, opts ...grpc.CallOption) (*GetPaperByTitleResponse, error)
		AddPaper(ctx context.Context, in *AddPaperRequest, opts ...grpc.CallOption) (*AddPaperResponse, error)
		DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperResponse, error)
		UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperResponse, error)
		DownloadPaper(ctx context.Context, in *DownloadPaperRequest, opts ...grpc.CallOption) (*DownloadPaperResponse, error)
	}

	defaultPaperService struct {
		cli zrpc.Client
	}
)

func NewPaperService(cli zrpc.Client) PaperService {
	return &defaultPaperService{
		cli: cli,
	}
}

func (m *defaultPaperService) GetAllPaper(ctx context.Context, in *GetAllPaperRequest, opts ...grpc.CallOption) (*GetAllPaperResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.GetAllPaper(ctx, in, opts...)
}

func (m *defaultPaperService) GetPaperById(ctx context.Context, in *GetPaperByIdRequest, opts ...grpc.CallOption) (*GetPaperByIdResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.GetPaperById(ctx, in, opts...)
}

func (m *defaultPaperService) GetPaperByTitle(ctx context.Context, in *GetPaperByTitleRequest, opts ...grpc.CallOption) (*GetPaperByTitleResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.GetPaperByTitle(ctx, in, opts...)
}

func (m *defaultPaperService) AddPaper(ctx context.Context, in *AddPaperRequest, opts ...grpc.CallOption) (*AddPaperResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.AddPaper(ctx, in, opts...)
}

func (m *defaultPaperService) DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.DeletePaper(ctx, in, opts...)
}

func (m *defaultPaperService) UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.UpdatePaper(ctx, in, opts...)
}

func (m *defaultPaperService) DownloadPaper(ctx context.Context, in *DownloadPaperRequest, opts ...grpc.CallOption) (*DownloadPaperResponse, error) {
	client := paper_rpc_pb.NewPaperServiceClient(m.cli.Conn())
	return client.DownloadPaper(ctx, in, opts...)
}
