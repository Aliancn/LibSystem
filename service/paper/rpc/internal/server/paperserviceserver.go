// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: paper.proto

package server

import (
	"context"

	"LibSystem/service/paper/rpc/internal/logic"
	"LibSystem/service/paper/rpc/internal/svc"
	"LibSystem/service/paper/rpc/pb/paper_rpc_pb"
)

type PaperServiceServer struct {
	svcCtx *svc.ServiceContext
	paper_rpc_pb.UnimplementedPaperServiceServer
}

func NewPaperServiceServer(svcCtx *svc.ServiceContext) *PaperServiceServer {
	return &PaperServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *PaperServiceServer) GetAllPaper(ctx context.Context, in *paper_rpc_pb.GetAllPaperRequest) (*paper_rpc_pb.GetAllPaperResponse, error) {
	l := logic.NewGetAllPaperLogic(ctx, s.svcCtx)
	return l.GetAllPaper(in)
}

func (s *PaperServiceServer) GetPaperById(ctx context.Context, in *paper_rpc_pb.GetPaperByIdRequest) (*paper_rpc_pb.GetPaperByIdResponse, error) {
	l := logic.NewGetPaperByIdLogic(ctx, s.svcCtx)
	return l.GetPaperById(in)
}

func (s *PaperServiceServer) GetPaperByTitle(ctx context.Context, in *paper_rpc_pb.GetPaperByTitleRequest) (*paper_rpc_pb.GetPaperByTitleResponse, error) {
	l := logic.NewGetPaperByTitleLogic(ctx, s.svcCtx)
	return l.GetPaperByTitle(in)
}

func (s *PaperServiceServer) AddPaper(ctx context.Context, in *paper_rpc_pb.AddPaperRequest) (*paper_rpc_pb.AddPaperResponse, error) {
	l := logic.NewAddPaperLogic(ctx, s.svcCtx)
	return l.AddPaper(in)
}

func (s *PaperServiceServer) DeletePaper(ctx context.Context, in *paper_rpc_pb.DeletePaperRequest) (*paper_rpc_pb.DeletePaperResponse, error) {
	l := logic.NewDeletePaperLogic(ctx, s.svcCtx)
	return l.DeletePaper(in)
}

func (s *PaperServiceServer) UpdatePaper(ctx context.Context, in *paper_rpc_pb.UpdatePaperRequest) (*paper_rpc_pb.UpdatePaperResponse, error) {
	l := logic.NewUpdatePaperLogic(ctx, s.svcCtx)
	return l.UpdatePaper(in)
}

func (s *PaperServiceServer) DownloadPaper(ctx context.Context, in *paper_rpc_pb.DownloadPaperRequest) (*paper_rpc_pb.DownloadPaperResponse, error) {
	l := logic.NewDownloadPaperLogic(ctx, s.svcCtx)
	return l.DownloadPaper(in)
}
