// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: paper.proto

package paper_rpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaperService_GetAllPaper_FullMethodName     = "/paper_rpc.PaperService/GetAllPaper"
	PaperService_GetPaperById_FullMethodName    = "/paper_rpc.PaperService/GetPaperById"
	PaperService_GetPaperByTitle_FullMethodName = "/paper_rpc.PaperService/GetPaperByTitle"
	PaperService_AddPaper_FullMethodName        = "/paper_rpc.PaperService/AddPaper"
	PaperService_DeletePaper_FullMethodName     = "/paper_rpc.PaperService/DeletePaper"
	PaperService_UpdatePaper_FullMethodName     = "/paper_rpc.PaperService/UpdatePaper"
	PaperService_DownloadPaper_FullMethodName   = "/paper_rpc.PaperService/DownloadPaper"
)

// PaperServiceClient is the client API for PaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type PaperServiceClient interface {
	GetAllPaper(ctx context.Context, in *GetAllPaperRequest, opts ...grpc.CallOption) (*GetAllPaperResponse, error)
	GetPaperById(ctx context.Context, in *GetPaperByIdRequest, opts ...grpc.CallOption) (*GetPaperByIdResponse, error)
	GetPaperByTitle(ctx context.Context, in *GetPaperByTitleRequest, opts ...grpc.CallOption) (*GetPaperByTitleResponse, error)
	AddPaper(ctx context.Context, in *AddPaperRequest, opts ...grpc.CallOption) (*AddPaperResponse, error)
	DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperResponse, error)
	UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperResponse, error)
	DownloadPaper(ctx context.Context, in *DownloadPaperRequest, opts ...grpc.CallOption) (*DownloadPaperResponse, error)
}

type paperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperServiceClient(cc grpc.ClientConnInterface) PaperServiceClient {
	return &paperServiceClient{cc}
}

func (c *paperServiceClient) GetAllPaper(ctx context.Context, in *GetAllPaperRequest, opts ...grpc.CallOption) (*GetAllPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPaperResponse)
	err := c.cc.Invoke(ctx, PaperService_GetAllPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) GetPaperById(ctx context.Context, in *GetPaperByIdRequest, opts ...grpc.CallOption) (*GetPaperByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaperByIdResponse)
	err := c.cc.Invoke(ctx, PaperService_GetPaperById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) GetPaperByTitle(ctx context.Context, in *GetPaperByTitleRequest, opts ...grpc.CallOption) (*GetPaperByTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaperByTitleResponse)
	err := c.cc.Invoke(ctx, PaperService_GetPaperByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) AddPaper(ctx context.Context, in *AddPaperRequest, opts ...grpc.CallOption) (*AddPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPaperResponse)
	err := c.cc.Invoke(ctx, PaperService_AddPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaperResponse)
	err := c.cc.Invoke(ctx, PaperService_DeletePaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaperResponse)
	err := c.cc.Invoke(ctx, PaperService_UpdatePaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) DownloadPaper(ctx context.Context, in *DownloadPaperRequest, opts ...grpc.CallOption) (*DownloadPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadPaperResponse)
	err := c.cc.Invoke(ctx, PaperService_DownloadPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaperServiceServer is the server API for PaperService service.
// All implementations must embed UnimplementedPaperServiceServer
// for forward compatibility.
//
// 定义服务
type PaperServiceServer interface {
	GetAllPaper(context.Context, *GetAllPaperRequest) (*GetAllPaperResponse, error)
	GetPaperById(context.Context, *GetPaperByIdRequest) (*GetPaperByIdResponse, error)
	GetPaperByTitle(context.Context, *GetPaperByTitleRequest) (*GetPaperByTitleResponse, error)
	AddPaper(context.Context, *AddPaperRequest) (*AddPaperResponse, error)
	DeletePaper(context.Context, *DeletePaperRequest) (*DeletePaperResponse, error)
	UpdatePaper(context.Context, *UpdatePaperRequest) (*UpdatePaperResponse, error)
	DownloadPaper(context.Context, *DownloadPaperRequest) (*DownloadPaperResponse, error)
	mustEmbedUnimplementedPaperServiceServer()
}

// UnimplementedPaperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaperServiceServer struct{}

func (UnimplementedPaperServiceServer) GetAllPaper(context.Context, *GetAllPaperRequest) (*GetAllPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaper not implemented")
}
func (UnimplementedPaperServiceServer) GetPaperById(context.Context, *GetPaperByIdRequest) (*GetPaperByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaperById not implemented")
}
func (UnimplementedPaperServiceServer) GetPaperByTitle(context.Context, *GetPaperByTitleRequest) (*GetPaperByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaperByTitle not implemented")
}
func (UnimplementedPaperServiceServer) AddPaper(context.Context, *AddPaperRequest) (*AddPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaper not implemented")
}
func (UnimplementedPaperServiceServer) DeletePaper(context.Context, *DeletePaperRequest) (*DeletePaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaper not implemented")
}
func (UnimplementedPaperServiceServer) UpdatePaper(context.Context, *UpdatePaperRequest) (*UpdatePaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaper not implemented")
}
func (UnimplementedPaperServiceServer) DownloadPaper(context.Context, *DownloadPaperRequest) (*DownloadPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPaper not implemented")
}
func (UnimplementedPaperServiceServer) mustEmbedUnimplementedPaperServiceServer() {}
func (UnimplementedPaperServiceServer) testEmbeddedByValue()                      {}

// UnsafePaperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperServiceServer will
// result in compilation errors.
type UnsafePaperServiceServer interface {
	mustEmbedUnimplementedPaperServiceServer()
}

func RegisterPaperServiceServer(s grpc.ServiceRegistrar, srv PaperServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaperService_ServiceDesc, srv)
}

func _PaperService_GetAllPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).GetAllPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_GetAllPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).GetAllPaper(ctx, req.(*GetAllPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_GetPaperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).GetPaperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_GetPaperById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).GetPaperById(ctx, req.(*GetPaperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_GetPaperByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).GetPaperByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_GetPaperByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).GetPaperByTitle(ctx, req.(*GetPaperByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_AddPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).AddPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_AddPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).AddPaper(ctx, req.(*AddPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_DeletePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).DeletePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_DeletePaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).DeletePaper(ctx, req.(*DeletePaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_UpdatePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).UpdatePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_UpdatePaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).UpdatePaper(ctx, req.(*UpdatePaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_DownloadPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).DownloadPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_DownloadPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).DownloadPaper(ctx, req.(*DownloadPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaperService_ServiceDesc is the grpc.ServiceDesc for PaperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paper_rpc.PaperService",
	HandlerType: (*PaperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPaper",
			Handler:    _PaperService_GetAllPaper_Handler,
		},
		{
			MethodName: "GetPaperById",
			Handler:    _PaperService_GetPaperById_Handler,
		},
		{
			MethodName: "GetPaperByTitle",
			Handler:    _PaperService_GetPaperByTitle_Handler,
		},
		{
			MethodName: "AddPaper",
			Handler:    _PaperService_AddPaper_Handler,
		},
		{
			MethodName: "DeletePaper",
			Handler:    _PaperService_DeletePaper_Handler,
		},
		{
			MethodName: "UpdatePaper",
			Handler:    _PaperService_UpdatePaper_Handler,
		},
		{
			MethodName: "DownloadPaper",
			Handler:    _PaperService_DownloadPaper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paper.proto",
}
