// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package server

import (
	"context"

	"LibSystem/service/user/rpc/internal/logic"
	"LibSystem/service/user/rpc/internal/svc"
	"LibSystem/service/user/rpc/pb/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServiceServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServiceServer) Logout(ctx context.Context, in *user.LogoutRequest) (*user.LogoutResponse, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

func (s *UserServiceServer) GetAllUser(ctx context.Context, in *user.GetAllUserRequest) (*user.GetAllUserResponse, error) {
	l := logic.NewGetAllUserLogic(ctx, s.svcCtx)
	return l.GetAllUser(in)
}

func (s *UserServiceServer) GetUserById(ctx context.Context, in *user.GetUserByIdRequest) (*user.GetUserByIdResponse, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServiceServer) GetUserByName(ctx context.Context, in *user.GetUserByNameRequest) (*user.GetUserByNameResponse, error) {
	l := logic.NewGetUserByNameLogic(ctx, s.svcCtx)
	return l.GetUserByName(in)
}

func (s *UserServiceServer) AddUser(ctx context.Context, in *user.AddUserRequest) (*user.AddUserResponse, error) {
	l := logic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoRequest) (*user.UpdateUserInfoResponse, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *user.DeleteUserRequest) (*user.DeleteUserResponse, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) EditPassword(ctx context.Context, in *user.EditPasswordRequest) (*user.EditPasswordResponse, error) {
	l := logic.NewEditPasswordLogic(ctx, s.svcCtx)
	return l.EditPassword(in)
}
