// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userservice

import (
	"context"

	"LibSystem/service/user/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserRequest         = user.AddUserRequest
	AddUserResponse        = user.AddUserResponse
	Base                   = user.Base
	DeleteUserRequest      = user.DeleteUserRequest
	DeleteUserResponse     = user.DeleteUserResponse
	EditPasswordRequest    = user.EditPasswordRequest
	EditPasswordResponse   = user.EditPasswordResponse
	GetAllUserRequest      = user.GetAllUserRequest
	GetAllUserResponse     = user.GetAllUserResponse
	GetUserByIdRequest     = user.GetUserByIdRequest
	GetUserByIdResponse    = user.GetUserByIdResponse
	GetUserByNameRequest   = user.GetUserByNameRequest
	GetUserByNameResponse  = user.GetUserByNameResponse
	LoginRequest           = user.LoginRequest
	LoginResponse          = user.LoginResponse
	LoginResponseData      = user.LoginResponseData
	LogoutRequest          = user.LogoutRequest
	LogoutResponse         = user.LogoutResponse
	RegisterRequest        = user.RegisterRequest
	RegisterResponse       = user.RegisterResponse
	UpdateUserInfoRequest  = user.UpdateUserInfoRequest
	UpdateUserInfoResponse = user.UpdateUserInfoResponse
	UserList               = user.UserList
	UserVO                 = user.UserVO

	UserService interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error)
		GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
		GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserByNameResponse, error)
		AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*EditPasswordResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUserService) GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUserResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetAllUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserByNameResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByName(ctx, in, opts...)
}

func (m *defaultUserService) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultUserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUserService) EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*EditPasswordResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.EditPassword(ctx, in, opts...)
}
